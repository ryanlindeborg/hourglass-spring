package com.ryanlindeborg.hourglass.hourglassspring.security;

import lombok.Builder;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.userdetails.User;

import java.util.Collection;

public class HourglassUser extends User {
    private Long minJwtIssuedTimestamp;

    public HourglassUser(String username, String password, Collection<? extends GrantedAuthority> authorities, Long minJwtIssuedTimestamp) {
        super(username, password, authorities);
        this.minJwtIssuedTimestamp = minJwtIssuedTimestamp;
    }

    /*
    Note: Because this builder is generated by Lombok, this builder does not encode the password like the Spring
    Security User builder does. This is fine though because we don't actually save the password into the User object
    */
    @Builder(builderMethodName = "hourglassUserBuilder")
    public HourglassUser(String username, String password, boolean enabled, boolean accountNonExpired, boolean credentialsNonExpired, boolean accountNonLocked, Collection<? extends GrantedAuthority> authorities, Long minJwtIssuedTimestamp) {
        super(username, password, enabled, accountNonExpired, credentialsNonExpired, accountNonLocked, authorities);
        this.minJwtIssuedTimestamp = minJwtIssuedTimestamp;
    }

    public Long getMinJwtIssuedTimestamp() {
        return minJwtIssuedTimestamp;
    }
}
